//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for IdentifierTypes.
const (
	BSN                IdentifierTypes = "BSN"
	ORGANISATIONPSEUDO IdentifierTypes = "ORGANISATION_PSEUDO"
)

// ExchangeIdentifierResponse defines model for exchangeIdentifierResponse.
type ExchangeIdentifierResponse struct {
	Identifier *Identifier `json:"identifier,omitempty"`
}

// ExchangeTokenResponse defines model for exchangeTokenResponse.
type ExchangeTokenResponse struct {
	Identifier *Identifier `json:"identifier,omitempty"`
}

// GetTokenResponse defines model for getTokenResponse.
type GetTokenResponse struct {
	Token *Token `json:"token,omitempty"`
}

// Identifier defines model for identifier.
type Identifier struct {
	Type  *IdentifierTypes `json:"type,omitempty"`
	Value *string          `json:"value,omitempty"`
}

// IdentifierTypes defines model for identifierTypes.
type IdentifierTypes string

// Scope defines model for scope.
type Scope = string

// Token defines model for token.
type Token = string

// ExchangeIdentifierRequest defines model for exchangeIdentifierRequest.
type ExchangeIdentifierRequest struct {
	Identifier              *Identifier      `json:"identifier,omitempty"`
	Organisation            *string          `json:"organisation,omitempty"`
	RecipientIdentifierType *IdentifierTypes `json:"recipientIdentifierType,omitempty"`
	Scope                   *Scope           `json:"scope,omitempty"`
}

// ExchangeTokenRequest defines model for exchangeTokenRequest.
type ExchangeTokenRequest struct {
	IdentifierType *IdentifierTypes `json:"identifierType,omitempty"`
	Organisation   *string          `json:"organisation,omitempty"`
	Scope          *Scope           `json:"scope,omitempty"`
	Token          *Token           `json:"token,omitempty"`
}

// GetTokenRequest defines model for getTokenRequest.
type GetTokenRequest struct {
	Identifier *Identifier `json:"identifier,omitempty"`
	Receiver   *string     `json:"receiver,omitempty"`
	Scope      *Scope      `json:"scope,omitempty"`
	Sender     *string     `json:"sender,omitempty"`
}

// ExchangeIdentifierJSONBody defines parameters for ExchangeIdentifier.
type ExchangeIdentifierJSONBody struct {
	Identifier              *Identifier      `json:"identifier,omitempty"`
	Organisation            *string          `json:"organisation,omitempty"`
	RecipientIdentifierType *IdentifierTypes `json:"recipientIdentifierType,omitempty"`
	Scope                   *Scope           `json:"scope,omitempty"`
}

// ExchangeTokenJSONBody defines parameters for ExchangeToken.
type ExchangeTokenJSONBody struct {
	IdentifierType *IdentifierTypes `json:"identifierType,omitempty"`
	Organisation   *string          `json:"organisation,omitempty"`
	Scope          *Scope           `json:"scope,omitempty"`
	Token          *Token           `json:"token,omitempty"`
}

// GetTokenJSONBody defines parameters for GetToken.
type GetTokenJSONBody struct {
	Identifier *Identifier `json:"identifier,omitempty"`
	Receiver   *string     `json:"receiver,omitempty"`
	Scope      *Scope      `json:"scope,omitempty"`
	Sender     *string     `json:"sender,omitempty"`
}

// ExchangeIdentifierJSONRequestBody defines body for ExchangeIdentifier for application/json ContentType.
type ExchangeIdentifierJSONRequestBody ExchangeIdentifierJSONBody

// ExchangeTokenJSONRequestBody defines body for ExchangeToken for application/json ContentType.
type ExchangeTokenJSONRequestBody ExchangeTokenJSONBody

// GetTokenJSONRequestBody defines body for GetToken for application/json ContentType.
type GetTokenJSONRequestBody GetTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// exchange an identifier for another identifier
	// (POST /exchangeIdentifier)
	ExchangeIdentifier(w http.ResponseWriter, r *http.Request)
	// exchange token for an identifier
	// (POST /exchangeToken)
	ExchangeToken(w http.ResponseWriter, r *http.Request)
	// get a token
	// (POST /getToken)
	GetToken(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ExchangeIdentifier operation middleware
func (siw *ServerInterfaceWrapper) ExchangeIdentifier(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExchangeIdentifier(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExchangeToken operation middleware
func (siw *ServerInterfaceWrapper) ExchangeToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExchangeToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/exchangeIdentifier", wrapper.ExchangeIdentifier)
	m.HandleFunc("POST "+options.BaseURL+"/exchangeToken", wrapper.ExchangeToken)
	m.HandleFunc("POST "+options.BaseURL+"/getToken", wrapper.GetToken)

	return m
}

type ExchangeIdentifierResponseJSONResponse ExchangeIdentifierResponse

type ExchangeTokenResponseJSONResponse ExchangeTokenResponse

type GetTokenResponseJSONResponse GetTokenResponse

type ExchangeIdentifierRequestObject struct {
	Body *ExchangeIdentifierJSONRequestBody
}

type ExchangeIdentifierResponseObject interface {
	VisitExchangeIdentifierResponse(w http.ResponseWriter) error
}

type ExchangeIdentifier200JSONResponse struct {
	ExchangeIdentifierResponseJSONResponse
}

func (response ExchangeIdentifier200JSONResponse) VisitExchangeIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExchangeTokenRequestObject struct {
	Body *ExchangeTokenJSONRequestBody
}

type ExchangeTokenResponseObject interface {
	VisitExchangeTokenResponse(w http.ResponseWriter) error
}

type ExchangeToken200JSONResponse struct {
	ExchangeTokenResponseJSONResponse
}

func (response ExchangeToken200JSONResponse) VisitExchangeTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTokenRequestObject struct {
	Body *GetTokenJSONRequestBody
}

type GetTokenResponseObject interface {
	VisitGetTokenResponse(w http.ResponseWriter) error
}

type GetToken200JSONResponse struct{ GetTokenResponseJSONResponse }

func (response GetToken200JSONResponse) VisitGetTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// exchange an identifier for another identifier
	// (POST /exchangeIdentifier)
	ExchangeIdentifier(ctx context.Context, request ExchangeIdentifierRequestObject) (ExchangeIdentifierResponseObject, error)
	// exchange token for an identifier
	// (POST /exchangeToken)
	ExchangeToken(ctx context.Context, request ExchangeTokenRequestObject) (ExchangeTokenResponseObject, error)
	// get a token
	// (POST /getToken)
	GetToken(ctx context.Context, request GetTokenRequestObject) (GetTokenResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ExchangeIdentifier operation middleware
func (sh *strictHandler) ExchangeIdentifier(w http.ResponseWriter, r *http.Request) {
	var request ExchangeIdentifierRequestObject

	var body ExchangeIdentifierJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeIdentifier(ctx, request.(ExchangeIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeIdentifier")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExchangeIdentifierResponseObject); ok {
		if err := validResponse.VisitExchangeIdentifierResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeToken operation middleware
func (sh *strictHandler) ExchangeToken(w http.ResponseWriter, r *http.Request) {
	var request ExchangeTokenRequestObject

	var body ExchangeTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeToken(ctx, request.(ExchangeTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExchangeTokenResponseObject); ok {
		if err := validResponse.VisitExchangeTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetToken operation middleware
func (sh *strictHandler) GetToken(w http.ResponseWriter, r *http.Request) {
	var request GetTokenRequestObject

	var body GetTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetToken(ctx, request.(GetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTokenResponseObject); ok {
		if err := validResponse.VisitGetTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
